# Crate Documentation

**Version:** 1.4.0

**Format Version:** 45

# Module `web_service_uptime_axum`

# Web service uptime axum

**[documentation](https://docs.rs/web-service-uptime-axum/)**
•
**[source](https://github.com/joelparkerhenderson/web-service-uptime-axum/)**
•
**[llms.txt](https://raw.githubusercontent.com/joelparkerhenderson/web-service-uptime-axum/refs/heads/main/llms.txt)**
•
**[crate](https://crates.io/crates/web-service-uptime-axum)**
•
**[email](mailto:joel@joelparkerhenderson.com)**

Web service that displays the program uptime by using Axum, Tokio, Rust.

This is a very simple web service that we use for testing our systems.

## Steps

Run the service using the default address 0.0.0.0:8080:

```sh
cargo run
```

Browse <https://localhost:8080/uptime>

You should see a web page that displays the uptime in seconds.

Wait a little bit, then use your browser to reload the web page.

You should see the uptime increase a little bit.

## Options

Run the service using a command line option for a custom address:

```sh
cargo run -- "1.2.3.4:5678"
```

Run the service using an environment variable for a custom address:

```sh
export ADDRESS="1.2.3.4:5678"
cargo run
```

## References

Based on Demo Rust Axum free open source software:
<https://github.com/joelparkerhenderson/demo-rust-axum>


## Modules

## Module `app`

```rust
pub(crate) mod app { /* ... */ }
```

### Functions

#### Function `app`

Create our application by creating our router.

```rust
pub fn app() -> axum::Router { /* ... */ }
```

#### Function `fallback`

axum handler for any request that fails to match the router routes.
This implementation returns HTTP status code Not Found (404).

```rust
pub async fn fallback(uri: axum::http::Uri) -> impl axum::response::IntoResponse { /* ... */ }
```

#### Function `uptime`

axum handler for "GET /uptime" which shows the program's uptime duration.
This shows how to write a handler that uses a global static lazy value.

```rust
pub async fn uptime() -> String { /* ... */ }
```

### Constants and Statics

#### Static `INSTANT`

Create the constant INSTANT so the program can track its own uptime.

```rust
pub static INSTANT: std::sync::LazyLock<std::time::Instant> = _;
```

## Functions

### Function `main`

The main function does these steps:
- Start tracing and emit a tracing event.
- Get a command line argument as our bind address.
- Create our application which is an axum router.
- Run our application as a hyper server.

```rust
pub(crate) fn main() { /* ... */ }
```

### Function `shutdown_signal`

Shutdown signal to run axum with graceful shutdown when
a user presses Ctrl+C or Unix sends a terminate signal.

```rust
pub async fn shutdown_signal() { /* ... */ }
```

## Constants and Statics

### Static `INSTANT`

Create the constant INSTANT so the program can track its own uptime.

```rust
pub static INSTANT: std::sync::LazyLock<std::time::Instant> = _;
```

